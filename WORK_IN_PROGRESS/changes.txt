As of December 2023, I haven't any plans to continue experimenting with this particular hardware, but who knows.
It was a proof-of-concept, to show that this controller really is small enough to be built discretely.

I am currently writing firmware for a software emulator for the next revision of this CPU.
The architecture I am using going forward has changed slightly, but significantly (rev. Daffodil):

1. xJ, xT and xE (jump instructions) now change the PC (low order) instead of branching to banks
(and setting the PC to zero).

2. xC has been removed. CALL is now the scrounge pair "RR" (like "NM"=>RET). The CALL target is the
most recently used accumulator register (W).

3. The X and Y registers are gone. F is used for X, R is used for Y. This means that during a CALL or TRAP,
the R register is set to the high-order return address, the F register is set to the low-order return address,
and the RET instruction expects these values to be there.

4. There is a new scrounge opcode EXIT. It behaves like a far FAR jump (sets low-order PC to zero).

5. The ALU has changed. ALU opcodes are now dedicated opcodes, using bits
of GETPUT instructions. Alu results feed into an independent F register when executing an ALU opcode.
Hence no need for locking.

6. There are additional instructions INC and DEC that add signed offsets to F.

7. The address mapping has been simplified: any fetch instruction uses only the PC high register prefix,
thus ignoring the Global/Local mapping, so that the segment size is the full 256 bytes when accessing code.

This sounds much more complicated than it is. See the tiny emulator written in C for how the controller works
after these changes. The hardware changes for this should be quite small.

The next step after bootstrapping a native assembler within the firmware project will be a Verilog/FPGA version.

This folder contains a modified assembler, an emulator, and more sample code.
Run the assembler first, then run the emulator.
The assembler program converts an ASCII string into a number in B.
  
